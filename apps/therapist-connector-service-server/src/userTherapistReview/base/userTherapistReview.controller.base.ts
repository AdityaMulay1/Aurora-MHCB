/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserTherapistReviewService } from "../userTherapistReview.service";
import { UserTherapistReviewCreateInput } from "./UserTherapistReviewCreateInput";
import { UserTherapistReview } from "./UserTherapistReview";
import { UserTherapistReviewFindManyArgs } from "./UserTherapistReviewFindManyArgs";
import { UserTherapistReviewWhereUniqueInput } from "./UserTherapistReviewWhereUniqueInput";
import { UserTherapistReviewUpdateInput } from "./UserTherapistReviewUpdateInput";

export class UserTherapistReviewControllerBase {
  constructor(protected readonly service: UserTherapistReviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserTherapistReview })
  async createUserTherapistReview(
    @common.Body() data: UserTherapistReviewCreateInput
  ): Promise<UserTherapistReview> {
    return await this.service.createUserTherapistReview({
      data: data,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        reviewId: true,
        reviewText: true,
        therapistId: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserTherapistReview] })
  @ApiNestedQuery(UserTherapistReviewFindManyArgs)
  async userTherapistReviews(
    @common.Req() request: Request
  ): Promise<UserTherapistReview[]> {
    const args = plainToClass(UserTherapistReviewFindManyArgs, request.query);
    return this.service.userTherapistReviews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        reviewId: true,
        reviewText: true,
        therapistId: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserTherapistReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userTherapistReview(
    @common.Param() params: UserTherapistReviewWhereUniqueInput
  ): Promise<UserTherapistReview | null> {
    const result = await this.service.userTherapistReview({
      where: params,
      select: {
        createdAt: true,
        id: true,
        rating: true,
        reviewId: true,
        reviewText: true,
        therapistId: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserTherapistReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserTherapistReview(
    @common.Param() params: UserTherapistReviewWhereUniqueInput,
    @common.Body() data: UserTherapistReviewUpdateInput
  ): Promise<UserTherapistReview | null> {
    try {
      return await this.service.updateUserTherapistReview({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          rating: true,
          reviewId: true,
          reviewText: true,
          therapistId: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserTherapistReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserTherapistReview(
    @common.Param() params: UserTherapistReviewWhereUniqueInput
  ): Promise<UserTherapistReview | null> {
    try {
      return await this.service.deleteUserTherapistReview({
        where: params,
        select: {
          createdAt: true,
          id: true,
          rating: true,
          reviewId: true,
          reviewText: true,
          therapistId: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
