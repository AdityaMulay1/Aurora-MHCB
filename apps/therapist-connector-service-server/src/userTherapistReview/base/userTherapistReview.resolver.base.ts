/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserTherapistReview } from "./UserTherapistReview";
import { UserTherapistReviewCountArgs } from "./UserTherapistReviewCountArgs";
import { UserTherapistReviewFindManyArgs } from "./UserTherapistReviewFindManyArgs";
import { UserTherapistReviewFindUniqueArgs } from "./UserTherapistReviewFindUniqueArgs";
import { CreateUserTherapistReviewArgs } from "./CreateUserTherapistReviewArgs";
import { UpdateUserTherapistReviewArgs } from "./UpdateUserTherapistReviewArgs";
import { DeleteUserTherapistReviewArgs } from "./DeleteUserTherapistReviewArgs";
import { UserTherapistReviewService } from "../userTherapistReview.service";
@graphql.Resolver(() => UserTherapistReview)
export class UserTherapistReviewResolverBase {
  constructor(protected readonly service: UserTherapistReviewService) {}

  async _userTherapistReviewsMeta(
    @graphql.Args() args: UserTherapistReviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserTherapistReview])
  async userTherapistReviews(
    @graphql.Args() args: UserTherapistReviewFindManyArgs
  ): Promise<UserTherapistReview[]> {
    return this.service.userTherapistReviews(args);
  }

  @graphql.Query(() => UserTherapistReview, { nullable: true })
  async userTherapistReview(
    @graphql.Args() args: UserTherapistReviewFindUniqueArgs
  ): Promise<UserTherapistReview | null> {
    const result = await this.service.userTherapistReview(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserTherapistReview)
  async createUserTherapistReview(
    @graphql.Args() args: CreateUserTherapistReviewArgs
  ): Promise<UserTherapistReview> {
    return await this.service.createUserTherapistReview({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserTherapistReview)
  async updateUserTherapistReview(
    @graphql.Args() args: UpdateUserTherapistReviewArgs
  ): Promise<UserTherapistReview | null> {
    try {
      return await this.service.updateUserTherapistReview({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTherapistReview)
  async deleteUserTherapistReview(
    @graphql.Args() args: DeleteUserTherapistReviewArgs
  ): Promise<UserTherapistReview | null> {
    try {
      return await this.service.deleteUserTherapistReview(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
