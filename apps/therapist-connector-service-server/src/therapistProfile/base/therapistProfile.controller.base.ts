/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TherapistProfileService } from "../therapistProfile.service";
import { TherapistProfileCreateInput } from "./TherapistProfileCreateInput";
import { TherapistProfile } from "./TherapistProfile";
import { TherapistProfileFindManyArgs } from "./TherapistProfileFindManyArgs";
import { TherapistProfileWhereUniqueInput } from "./TherapistProfileWhereUniqueInput";
import { TherapistProfileUpdateInput } from "./TherapistProfileUpdateInput";

export class TherapistProfileControllerBase {
  constructor(protected readonly service: TherapistProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TherapistProfile })
  async createTherapistProfile(
    @common.Body() data: TherapistProfileCreateInput
  ): Promise<TherapistProfile> {
    return await this.service.createTherapistProfile({
      data: data,
      select: {
        availability: true,
        bio: true,
        contactInfo: true,
        createdAt: true,
        experienceYears: true,
        id: true,
        name: true,
        profilePictureUrl: true,
        qualifications: true,
        rating: true,
        specialization: true,
        therapistId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TherapistProfile] })
  @ApiNestedQuery(TherapistProfileFindManyArgs)
  async therapistProfiles(
    @common.Req() request: Request
  ): Promise<TherapistProfile[]> {
    const args = plainToClass(TherapistProfileFindManyArgs, request.query);
    return this.service.therapistProfiles({
      ...args,
      select: {
        availability: true,
        bio: true,
        contactInfo: true,
        createdAt: true,
        experienceYears: true,
        id: true,
        name: true,
        profilePictureUrl: true,
        qualifications: true,
        rating: true,
        specialization: true,
        therapistId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TherapistProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async therapistProfile(
    @common.Param() params: TherapistProfileWhereUniqueInput
  ): Promise<TherapistProfile | null> {
    const result = await this.service.therapistProfile({
      where: params,
      select: {
        availability: true,
        bio: true,
        contactInfo: true,
        createdAt: true,
        experienceYears: true,
        id: true,
        name: true,
        profilePictureUrl: true,
        qualifications: true,
        rating: true,
        specialization: true,
        therapistId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TherapistProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTherapistProfile(
    @common.Param() params: TherapistProfileWhereUniqueInput,
    @common.Body() data: TherapistProfileUpdateInput
  ): Promise<TherapistProfile | null> {
    try {
      return await this.service.updateTherapistProfile({
        where: params,
        data: data,
        select: {
          availability: true,
          bio: true,
          contactInfo: true,
          createdAt: true,
          experienceYears: true,
          id: true,
          name: true,
          profilePictureUrl: true,
          qualifications: true,
          rating: true,
          specialization: true,
          therapistId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TherapistProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTherapistProfile(
    @common.Param() params: TherapistProfileWhereUniqueInput
  ): Promise<TherapistProfile | null> {
    try {
      return await this.service.deleteTherapistProfile({
        where: params,
        select: {
          availability: true,
          bio: true,
          contactInfo: true,
          createdAt: true,
          experienceYears: true,
          id: true,
          name: true,
          profilePictureUrl: true,
          qualifications: true,
          rating: true,
          specialization: true,
          therapistId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
