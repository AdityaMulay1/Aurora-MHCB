/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TherapistProfile } from "./TherapistProfile";
import { TherapistProfileCountArgs } from "./TherapistProfileCountArgs";
import { TherapistProfileFindManyArgs } from "./TherapistProfileFindManyArgs";
import { TherapistProfileFindUniqueArgs } from "./TherapistProfileFindUniqueArgs";
import { CreateTherapistProfileArgs } from "./CreateTherapistProfileArgs";
import { UpdateTherapistProfileArgs } from "./UpdateTherapistProfileArgs";
import { DeleteTherapistProfileArgs } from "./DeleteTherapistProfileArgs";
import { TherapistProfileService } from "../therapistProfile.service";
@graphql.Resolver(() => TherapistProfile)
export class TherapistProfileResolverBase {
  constructor(protected readonly service: TherapistProfileService) {}

  async _therapistProfilesMeta(
    @graphql.Args() args: TherapistProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TherapistProfile])
  async therapistProfiles(
    @graphql.Args() args: TherapistProfileFindManyArgs
  ): Promise<TherapistProfile[]> {
    return this.service.therapistProfiles(args);
  }

  @graphql.Query(() => TherapistProfile, { nullable: true })
  async therapistProfile(
    @graphql.Args() args: TherapistProfileFindUniqueArgs
  ): Promise<TherapistProfile | null> {
    const result = await this.service.therapistProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TherapistProfile)
  async createTherapistProfile(
    @graphql.Args() args: CreateTherapistProfileArgs
  ): Promise<TherapistProfile> {
    return await this.service.createTherapistProfile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TherapistProfile)
  async updateTherapistProfile(
    @graphql.Args() args: UpdateTherapistProfileArgs
  ): Promise<TherapistProfile | null> {
    try {
      return await this.service.updateTherapistProfile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TherapistProfile)
  async deleteTherapistProfile(
    @graphql.Args() args: DeleteTherapistProfileArgs
  ): Promise<TherapistProfile | null> {
    try {
      return await this.service.deleteTherapistProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
