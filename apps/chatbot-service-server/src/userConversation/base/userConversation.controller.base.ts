/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserConversationService } from "../userConversation.service";
import { UserConversationCreateInput } from "./UserConversationCreateInput";
import { UserConversation } from "./UserConversation";
import { UserConversationFindManyArgs } from "./UserConversationFindManyArgs";
import { UserConversationWhereUniqueInput } from "./UserConversationWhereUniqueInput";
import { UserConversationUpdateInput } from "./UserConversationUpdateInput";

export class UserConversationControllerBase {
  constructor(protected readonly service: UserConversationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserConversation })
  async createUserConversation(
    @common.Body() data: UserConversationCreateInput
  ): Promise<UserConversation> {
    return await this.service.createUserConversation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserConversation] })
  @ApiNestedQuery(UserConversationFindManyArgs)
  async userConversations(
    @common.Req() request: Request
  ): Promise<UserConversation[]> {
    const args = plainToClass(UserConversationFindManyArgs, request.query);
    return this.service.userConversations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserConversation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userConversation(
    @common.Param() params: UserConversationWhereUniqueInput
  ): Promise<UserConversation | null> {
    const result = await this.service.userConversation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserConversation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserConversation(
    @common.Param() params: UserConversationWhereUniqueInput,
    @common.Body() data: UserConversationUpdateInput
  ): Promise<UserConversation | null> {
    try {
      return await this.service.updateUserConversation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserConversation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserConversation(
    @common.Param() params: UserConversationWhereUniqueInput
  ): Promise<UserConversation | null> {
    try {
      return await this.service.deleteUserConversation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
