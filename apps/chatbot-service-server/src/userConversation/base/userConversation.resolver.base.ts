/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserConversation } from "./UserConversation";
import { UserConversationCountArgs } from "./UserConversationCountArgs";
import { UserConversationFindManyArgs } from "./UserConversationFindManyArgs";
import { UserConversationFindUniqueArgs } from "./UserConversationFindUniqueArgs";
import { CreateUserConversationArgs } from "./CreateUserConversationArgs";
import { UpdateUserConversationArgs } from "./UpdateUserConversationArgs";
import { DeleteUserConversationArgs } from "./DeleteUserConversationArgs";
import { UserConversationService } from "../userConversation.service";
@graphql.Resolver(() => UserConversation)
export class UserConversationResolverBase {
  constructor(protected readonly service: UserConversationService) {}

  async _userConversationsMeta(
    @graphql.Args() args: UserConversationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserConversation])
  async userConversations(
    @graphql.Args() args: UserConversationFindManyArgs
  ): Promise<UserConversation[]> {
    return this.service.userConversations(args);
  }

  @graphql.Query(() => UserConversation, { nullable: true })
  async userConversation(
    @graphql.Args() args: UserConversationFindUniqueArgs
  ): Promise<UserConversation | null> {
    const result = await this.service.userConversation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserConversation)
  async createUserConversation(
    @graphql.Args() args: CreateUserConversationArgs
  ): Promise<UserConversation> {
    return await this.service.createUserConversation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserConversation)
  async updateUserConversation(
    @graphql.Args() args: UpdateUserConversationArgs
  ): Promise<UserConversation | null> {
    try {
      return await this.service.updateUserConversation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserConversation)
  async deleteUserConversation(
    @graphql.Args() args: DeleteUserConversationArgs
  ): Promise<UserConversation | null> {
    try {
      return await this.service.deleteUserConversation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
