/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BedtimeReminderService } from "../bedtimeReminder.service";
import { BedtimeReminderCreateInput } from "./BedtimeReminderCreateInput";
import { BedtimeReminder } from "./BedtimeReminder";
import { BedtimeReminderFindManyArgs } from "./BedtimeReminderFindManyArgs";
import { BedtimeReminderWhereUniqueInput } from "./BedtimeReminderWhereUniqueInput";
import { BedtimeReminderUpdateInput } from "./BedtimeReminderUpdateInput";

export class BedtimeReminderControllerBase {
  constructor(protected readonly service: BedtimeReminderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BedtimeReminder })
  async createBedtimeReminder(
    @common.Body() data: BedtimeReminderCreateInput
  ): Promise<BedtimeReminder> {
    return await this.service.createBedtimeReminder({
      data: data,
      select: {
        createdAt: true,
        daysOfWeek: true,
        id: true,
        isActive: true,
        message: true,
        reminderId: true,
        reminderTime: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BedtimeReminder] })
  @ApiNestedQuery(BedtimeReminderFindManyArgs)
  async bedtimeReminders(
    @common.Req() request: Request
  ): Promise<BedtimeReminder[]> {
    const args = plainToClass(BedtimeReminderFindManyArgs, request.query);
    return this.service.bedtimeReminders({
      ...args,
      select: {
        createdAt: true,
        daysOfWeek: true,
        id: true,
        isActive: true,
        message: true,
        reminderId: true,
        reminderTime: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BedtimeReminder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bedtimeReminder(
    @common.Param() params: BedtimeReminderWhereUniqueInput
  ): Promise<BedtimeReminder | null> {
    const result = await this.service.bedtimeReminder({
      where: params,
      select: {
        createdAt: true,
        daysOfWeek: true,
        id: true,
        isActive: true,
        message: true,
        reminderId: true,
        reminderTime: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BedtimeReminder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBedtimeReminder(
    @common.Param() params: BedtimeReminderWhereUniqueInput,
    @common.Body() data: BedtimeReminderUpdateInput
  ): Promise<BedtimeReminder | null> {
    try {
      return await this.service.updateBedtimeReminder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          daysOfWeek: true,
          id: true,
          isActive: true,
          message: true,
          reminderId: true,
          reminderTime: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BedtimeReminder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBedtimeReminder(
    @common.Param() params: BedtimeReminderWhereUniqueInput
  ): Promise<BedtimeReminder | null> {
    try {
      return await this.service.deleteBedtimeReminder({
        where: params,
        select: {
          createdAt: true,
          daysOfWeek: true,
          id: true,
          isActive: true,
          message: true,
          reminderId: true,
          reminderTime: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
