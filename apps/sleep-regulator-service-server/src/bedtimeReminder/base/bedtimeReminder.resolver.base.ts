/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BedtimeReminder } from "./BedtimeReminder";
import { BedtimeReminderCountArgs } from "./BedtimeReminderCountArgs";
import { BedtimeReminderFindManyArgs } from "./BedtimeReminderFindManyArgs";
import { BedtimeReminderFindUniqueArgs } from "./BedtimeReminderFindUniqueArgs";
import { CreateBedtimeReminderArgs } from "./CreateBedtimeReminderArgs";
import { UpdateBedtimeReminderArgs } from "./UpdateBedtimeReminderArgs";
import { DeleteBedtimeReminderArgs } from "./DeleteBedtimeReminderArgs";
import { BedtimeReminderService } from "../bedtimeReminder.service";
@graphql.Resolver(() => BedtimeReminder)
export class BedtimeReminderResolverBase {
  constructor(protected readonly service: BedtimeReminderService) {}

  async _bedtimeRemindersMeta(
    @graphql.Args() args: BedtimeReminderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BedtimeReminder])
  async bedtimeReminders(
    @graphql.Args() args: BedtimeReminderFindManyArgs
  ): Promise<BedtimeReminder[]> {
    return this.service.bedtimeReminders(args);
  }

  @graphql.Query(() => BedtimeReminder, { nullable: true })
  async bedtimeReminder(
    @graphql.Args() args: BedtimeReminderFindUniqueArgs
  ): Promise<BedtimeReminder | null> {
    const result = await this.service.bedtimeReminder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BedtimeReminder)
  async createBedtimeReminder(
    @graphql.Args() args: CreateBedtimeReminderArgs
  ): Promise<BedtimeReminder> {
    return await this.service.createBedtimeReminder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BedtimeReminder)
  async updateBedtimeReminder(
    @graphql.Args() args: UpdateBedtimeReminderArgs
  ): Promise<BedtimeReminder | null> {
    try {
      return await this.service.updateBedtimeReminder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BedtimeReminder)
  async deleteBedtimeReminder(
    @graphql.Args() args: DeleteBedtimeReminderArgs
  ): Promise<BedtimeReminder | null> {
    try {
      return await this.service.deleteBedtimeReminder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
