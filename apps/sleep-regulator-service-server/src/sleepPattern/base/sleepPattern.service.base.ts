/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SleepPattern as PrismaSleepPattern } from "@prisma/client";

export class SleepPatternServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SleepPatternCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sleepPattern.count(args);
  }

  async sleepPatterns(
    args: Prisma.SleepPatternFindManyArgs
  ): Promise<PrismaSleepPattern[]> {
    return this.prisma.sleepPattern.findMany(args);
  }
  async sleepPattern(
    args: Prisma.SleepPatternFindUniqueArgs
  ): Promise<PrismaSleepPattern | null> {
    return this.prisma.sleepPattern.findUnique(args);
  }
  async createSleepPattern(
    args: Prisma.SleepPatternCreateArgs
  ): Promise<PrismaSleepPattern> {
    return this.prisma.sleepPattern.create(args);
  }
  async updateSleepPattern(
    args: Prisma.SleepPatternUpdateArgs
  ): Promise<PrismaSleepPattern> {
    return this.prisma.sleepPattern.update(args);
  }
  async deleteSleepPattern(
    args: Prisma.SleepPatternDeleteArgs
  ): Promise<PrismaSleepPattern> {
    return this.prisma.sleepPattern.delete(args);
  }
}
