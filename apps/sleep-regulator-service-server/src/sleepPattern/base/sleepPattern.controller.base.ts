/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SleepPatternService } from "../sleepPattern.service";
import { SleepPatternCreateInput } from "./SleepPatternCreateInput";
import { SleepPattern } from "./SleepPattern";
import { SleepPatternFindManyArgs } from "./SleepPatternFindManyArgs";
import { SleepPatternWhereUniqueInput } from "./SleepPatternWhereUniqueInput";
import { SleepPatternUpdateInput } from "./SleepPatternUpdateInput";

export class SleepPatternControllerBase {
  constructor(protected readonly service: SleepPatternService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SleepPattern })
  async createSleepPattern(
    @common.Body() data: SleepPatternCreateInput
  ): Promise<SleepPattern> {
    return await this.service.createSleepPattern({
      data: data,
      select: {
        createdAt: true,
        id: true,
        notes: true,
        patternId: true,
        sleepDate: true,
        sleepDuration: true,
        sleepEnd: true,
        sleepQuality: true,
        sleepStart: true,
        updatedAt: true,
        userId: true,
        wakeUpCount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SleepPattern] })
  @ApiNestedQuery(SleepPatternFindManyArgs)
  async sleepPatterns(@common.Req() request: Request): Promise<SleepPattern[]> {
    const args = plainToClass(SleepPatternFindManyArgs, request.query);
    return this.service.sleepPatterns({
      ...args,
      select: {
        createdAt: true,
        id: true,
        notes: true,
        patternId: true,
        sleepDate: true,
        sleepDuration: true,
        sleepEnd: true,
        sleepQuality: true,
        sleepStart: true,
        updatedAt: true,
        userId: true,
        wakeUpCount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SleepPattern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sleepPattern(
    @common.Param() params: SleepPatternWhereUniqueInput
  ): Promise<SleepPattern | null> {
    const result = await this.service.sleepPattern({
      where: params,
      select: {
        createdAt: true,
        id: true,
        notes: true,
        patternId: true,
        sleepDate: true,
        sleepDuration: true,
        sleepEnd: true,
        sleepQuality: true,
        sleepStart: true,
        updatedAt: true,
        userId: true,
        wakeUpCount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SleepPattern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSleepPattern(
    @common.Param() params: SleepPatternWhereUniqueInput,
    @common.Body() data: SleepPatternUpdateInput
  ): Promise<SleepPattern | null> {
    try {
      return await this.service.updateSleepPattern({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          notes: true,
          patternId: true,
          sleepDate: true,
          sleepDuration: true,
          sleepEnd: true,
          sleepQuality: true,
          sleepStart: true,
          updatedAt: true,
          userId: true,
          wakeUpCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SleepPattern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSleepPattern(
    @common.Param() params: SleepPatternWhereUniqueInput
  ): Promise<SleepPattern | null> {
    try {
      return await this.service.deleteSleepPattern({
        where: params,
        select: {
          createdAt: true,
          id: true,
          notes: true,
          patternId: true,
          sleepDate: true,
          sleepDuration: true,
          sleepEnd: true,
          sleepQuality: true,
          sleepStart: true,
          updatedAt: true,
          userId: true,
          wakeUpCount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
