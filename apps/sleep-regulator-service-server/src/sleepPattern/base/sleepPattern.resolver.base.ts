/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SleepPattern } from "./SleepPattern";
import { SleepPatternCountArgs } from "./SleepPatternCountArgs";
import { SleepPatternFindManyArgs } from "./SleepPatternFindManyArgs";
import { SleepPatternFindUniqueArgs } from "./SleepPatternFindUniqueArgs";
import { CreateSleepPatternArgs } from "./CreateSleepPatternArgs";
import { UpdateSleepPatternArgs } from "./UpdateSleepPatternArgs";
import { DeleteSleepPatternArgs } from "./DeleteSleepPatternArgs";
import { SleepPatternService } from "../sleepPattern.service";
@graphql.Resolver(() => SleepPattern)
export class SleepPatternResolverBase {
  constructor(protected readonly service: SleepPatternService) {}

  async _sleepPatternsMeta(
    @graphql.Args() args: SleepPatternCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SleepPattern])
  async sleepPatterns(
    @graphql.Args() args: SleepPatternFindManyArgs
  ): Promise<SleepPattern[]> {
    return this.service.sleepPatterns(args);
  }

  @graphql.Query(() => SleepPattern, { nullable: true })
  async sleepPattern(
    @graphql.Args() args: SleepPatternFindUniqueArgs
  ): Promise<SleepPattern | null> {
    const result = await this.service.sleepPattern(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SleepPattern)
  async createSleepPattern(
    @graphql.Args() args: CreateSleepPatternArgs
  ): Promise<SleepPattern> {
    return await this.service.createSleepPattern({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SleepPattern)
  async updateSleepPattern(
    @graphql.Args() args: UpdateSleepPatternArgs
  ): Promise<SleepPattern | null> {
    try {
      return await this.service.updateSleepPattern({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SleepPattern)
  async deleteSleepPattern(
    @graphql.Args() args: DeleteSleepPatternArgs
  ): Promise<SleepPattern | null> {
    try {
      return await this.service.deleteSleepPattern(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
