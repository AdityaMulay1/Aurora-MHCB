/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RelaxationExerciseService } from "../relaxationExercise.service";
import { RelaxationExerciseCreateInput } from "./RelaxationExerciseCreateInput";
import { RelaxationExercise } from "./RelaxationExercise";
import { RelaxationExerciseFindManyArgs } from "./RelaxationExerciseFindManyArgs";
import { RelaxationExerciseWhereUniqueInput } from "./RelaxationExerciseWhereUniqueInput";
import { RelaxationExerciseUpdateInput } from "./RelaxationExerciseUpdateInput";

export class RelaxationExerciseControllerBase {
  constructor(protected readonly service: RelaxationExerciseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RelaxationExercise })
  async createRelaxationExercise(
    @common.Body() data: RelaxationExerciseCreateInput
  ): Promise<RelaxationExercise> {
    return await this.service.createRelaxationExercise({
      data: data,
      select: {
        audioUrl: true,
        category: true,
        createdAt: true,
        description: true,
        duration: true,
        exerciseId: true,
        id: true,
        title: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RelaxationExercise] })
  @ApiNestedQuery(RelaxationExerciseFindManyArgs)
  async relaxationExercises(
    @common.Req() request: Request
  ): Promise<RelaxationExercise[]> {
    const args = plainToClass(RelaxationExerciseFindManyArgs, request.query);
    return this.service.relaxationExercises({
      ...args,
      select: {
        audioUrl: true,
        category: true,
        createdAt: true,
        description: true,
        duration: true,
        exerciseId: true,
        id: true,
        title: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RelaxationExercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async relaxationExercise(
    @common.Param() params: RelaxationExerciseWhereUniqueInput
  ): Promise<RelaxationExercise | null> {
    const result = await this.service.relaxationExercise({
      where: params,
      select: {
        audioUrl: true,
        category: true,
        createdAt: true,
        description: true,
        duration: true,
        exerciseId: true,
        id: true,
        title: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RelaxationExercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRelaxationExercise(
    @common.Param() params: RelaxationExerciseWhereUniqueInput,
    @common.Body() data: RelaxationExerciseUpdateInput
  ): Promise<RelaxationExercise | null> {
    try {
      return await this.service.updateRelaxationExercise({
        where: params,
        data: data,
        select: {
          audioUrl: true,
          category: true,
          createdAt: true,
          description: true,
          duration: true,
          exerciseId: true,
          id: true,
          title: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RelaxationExercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRelaxationExercise(
    @common.Param() params: RelaxationExerciseWhereUniqueInput
  ): Promise<RelaxationExercise | null> {
    try {
      return await this.service.deleteRelaxationExercise({
        where: params,
        select: {
          audioUrl: true,
          category: true,
          createdAt: true,
          description: true,
          duration: true,
          exerciseId: true,
          id: true,
          title: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
