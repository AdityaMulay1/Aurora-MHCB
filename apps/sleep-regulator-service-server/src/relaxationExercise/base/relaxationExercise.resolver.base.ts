/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RelaxationExercise } from "./RelaxationExercise";
import { RelaxationExerciseCountArgs } from "./RelaxationExerciseCountArgs";
import { RelaxationExerciseFindManyArgs } from "./RelaxationExerciseFindManyArgs";
import { RelaxationExerciseFindUniqueArgs } from "./RelaxationExerciseFindUniqueArgs";
import { CreateRelaxationExerciseArgs } from "./CreateRelaxationExerciseArgs";
import { UpdateRelaxationExerciseArgs } from "./UpdateRelaxationExerciseArgs";
import { DeleteRelaxationExerciseArgs } from "./DeleteRelaxationExerciseArgs";
import { RelaxationExerciseService } from "../relaxationExercise.service";
@graphql.Resolver(() => RelaxationExercise)
export class RelaxationExerciseResolverBase {
  constructor(protected readonly service: RelaxationExerciseService) {}

  async _relaxationExercisesMeta(
    @graphql.Args() args: RelaxationExerciseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RelaxationExercise])
  async relaxationExercises(
    @graphql.Args() args: RelaxationExerciseFindManyArgs
  ): Promise<RelaxationExercise[]> {
    return this.service.relaxationExercises(args);
  }

  @graphql.Query(() => RelaxationExercise, { nullable: true })
  async relaxationExercise(
    @graphql.Args() args: RelaxationExerciseFindUniqueArgs
  ): Promise<RelaxationExercise | null> {
    const result = await this.service.relaxationExercise(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RelaxationExercise)
  async createRelaxationExercise(
    @graphql.Args() args: CreateRelaxationExerciseArgs
  ): Promise<RelaxationExercise> {
    return await this.service.createRelaxationExercise({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RelaxationExercise)
  async updateRelaxationExercise(
    @graphql.Args() args: UpdateRelaxationExerciseArgs
  ): Promise<RelaxationExercise | null> {
    try {
      return await this.service.updateRelaxationExercise({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RelaxationExercise)
  async deleteRelaxationExercise(
    @graphql.Args() args: DeleteRelaxationExerciseArgs
  ): Promise<RelaxationExercise | null> {
    try {
      return await this.service.deleteRelaxationExercise(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
