/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MeditationSession } from "./MeditationSession";
import { MeditationSessionCountArgs } from "./MeditationSessionCountArgs";
import { MeditationSessionFindManyArgs } from "./MeditationSessionFindManyArgs";
import { MeditationSessionFindUniqueArgs } from "./MeditationSessionFindUniqueArgs";
import { CreateMeditationSessionArgs } from "./CreateMeditationSessionArgs";
import { UpdateMeditationSessionArgs } from "./UpdateMeditationSessionArgs";
import { DeleteMeditationSessionArgs } from "./DeleteMeditationSessionArgs";
import { MeditationSessionService } from "../meditationSession.service";
@graphql.Resolver(() => MeditationSession)
export class MeditationSessionResolverBase {
  constructor(protected readonly service: MeditationSessionService) {}

  async _meditationSessionsMeta(
    @graphql.Args() args: MeditationSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MeditationSession])
  async meditationSessions(
    @graphql.Args() args: MeditationSessionFindManyArgs
  ): Promise<MeditationSession[]> {
    return this.service.meditationSessions(args);
  }

  @graphql.Query(() => MeditationSession, { nullable: true })
  async meditationSession(
    @graphql.Args() args: MeditationSessionFindUniqueArgs
  ): Promise<MeditationSession | null> {
    const result = await this.service.meditationSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MeditationSession)
  async createMeditationSession(
    @graphql.Args() args: CreateMeditationSessionArgs
  ): Promise<MeditationSession> {
    return await this.service.createMeditationSession({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MeditationSession)
  async updateMeditationSession(
    @graphql.Args() args: UpdateMeditationSessionArgs
  ): Promise<MeditationSession | null> {
    try {
      return await this.service.updateMeditationSession({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MeditationSession)
  async deleteMeditationSession(
    @graphql.Args() args: DeleteMeditationSessionArgs
  ): Promise<MeditationSession | null> {
    try {
      return await this.service.deleteMeditationSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
