/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeditationSessionService } from "../meditationSession.service";
import { MeditationSessionCreateInput } from "./MeditationSessionCreateInput";
import { MeditationSession } from "./MeditationSession";
import { MeditationSessionFindManyArgs } from "./MeditationSessionFindManyArgs";
import { MeditationSessionWhereUniqueInput } from "./MeditationSessionWhereUniqueInput";
import { MeditationSessionUpdateInput } from "./MeditationSessionUpdateInput";

export class MeditationSessionControllerBase {
  constructor(protected readonly service: MeditationSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MeditationSession })
  async createMeditationSession(
    @common.Body() data: MeditationSessionCreateInput
  ): Promise<MeditationSession> {
    return await this.service.createMeditationSession({
      data: data,
      select: {
        audioUrl: true,
        createdAt: true,
        duration: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MeditationSession] })
  @ApiNestedQuery(MeditationSessionFindManyArgs)
  async meditationSessions(
    @common.Req() request: Request
  ): Promise<MeditationSession[]> {
    const args = plainToClass(MeditationSessionFindManyArgs, request.query);
    return this.service.meditationSessions({
      ...args,
      select: {
        audioUrl: true,
        createdAt: true,
        duration: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MeditationSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meditationSession(
    @common.Param() params: MeditationSessionWhereUniqueInput
  ): Promise<MeditationSession | null> {
    const result = await this.service.meditationSession({
      where: params,
      select: {
        audioUrl: true,
        createdAt: true,
        duration: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MeditationSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeditationSession(
    @common.Param() params: MeditationSessionWhereUniqueInput,
    @common.Body() data: MeditationSessionUpdateInput
  ): Promise<MeditationSession | null> {
    try {
      return await this.service.updateMeditationSession({
        where: params,
        data: data,
        select: {
          audioUrl: true,
          createdAt: true,
          duration: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MeditationSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeditationSession(
    @common.Param() params: MeditationSessionWhereUniqueInput
  ): Promise<MeditationSession | null> {
    try {
      return await this.service.deleteMeditationSession({
        where: params,
        select: {
          audioUrl: true,
          createdAt: true,
          duration: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
