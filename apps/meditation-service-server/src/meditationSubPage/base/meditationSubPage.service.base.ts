/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeditationSubPage as PrismaMeditationSubPage,
} from "@prisma/client";

export class MeditationSubPageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeditationSubPageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.meditationSubPage.count(args);
  }

  async meditationSubPages(
    args: Prisma.MeditationSubPageFindManyArgs
  ): Promise<PrismaMeditationSubPage[]> {
    return this.prisma.meditationSubPage.findMany(args);
  }
  async meditationSubPage(
    args: Prisma.MeditationSubPageFindUniqueArgs
  ): Promise<PrismaMeditationSubPage | null> {
    return this.prisma.meditationSubPage.findUnique(args);
  }
  async createMeditationSubPage(
    args: Prisma.MeditationSubPageCreateArgs
  ): Promise<PrismaMeditationSubPage> {
    return this.prisma.meditationSubPage.create(args);
  }
  async updateMeditationSubPage(
    args: Prisma.MeditationSubPageUpdateArgs
  ): Promise<PrismaMeditationSubPage> {
    return this.prisma.meditationSubPage.update(args);
  }
  async deleteMeditationSubPage(
    args: Prisma.MeditationSubPageDeleteArgs
  ): Promise<PrismaMeditationSubPage> {
    return this.prisma.meditationSubPage.delete(args);
  }
}
