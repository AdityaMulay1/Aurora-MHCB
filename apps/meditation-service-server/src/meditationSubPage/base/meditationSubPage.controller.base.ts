/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeditationSubPageService } from "../meditationSubPage.service";
import { MeditationSubPageCreateInput } from "./MeditationSubPageCreateInput";
import { MeditationSubPage } from "./MeditationSubPage";
import { MeditationSubPageFindManyArgs } from "./MeditationSubPageFindManyArgs";
import { MeditationSubPageWhereUniqueInput } from "./MeditationSubPageWhereUniqueInput";
import { MeditationSubPageUpdateInput } from "./MeditationSubPageUpdateInput";

export class MeditationSubPageControllerBase {
  constructor(protected readonly service: MeditationSubPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MeditationSubPage })
  async createMeditationSubPage(
    @common.Body() data: MeditationSubPageCreateInput
  ): Promise<MeditationSubPage> {
    return await this.service.createMeditationSubPage({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        order: true,
        sessionType: true,
        subPageTitle: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MeditationSubPage] })
  @ApiNestedQuery(MeditationSubPageFindManyArgs)
  async meditationSubPages(
    @common.Req() request: Request
  ): Promise<MeditationSubPage[]> {
    const args = plainToClass(MeditationSubPageFindManyArgs, request.query);
    return this.service.meditationSubPages({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        order: true,
        sessionType: true,
        subPageTitle: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MeditationSubPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meditationSubPage(
    @common.Param() params: MeditationSubPageWhereUniqueInput
  ): Promise<MeditationSubPage | null> {
    const result = await this.service.meditationSubPage({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        order: true,
        sessionType: true,
        subPageTitle: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MeditationSubPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeditationSubPage(
    @common.Param() params: MeditationSubPageWhereUniqueInput,
    @common.Body() data: MeditationSubPageUpdateInput
  ): Promise<MeditationSubPage | null> {
    try {
      return await this.service.updateMeditationSubPage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          order: true,
          sessionType: true,
          subPageTitle: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MeditationSubPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeditationSubPage(
    @common.Param() params: MeditationSubPageWhereUniqueInput
  ): Promise<MeditationSubPage | null> {
    try {
      return await this.service.deleteMeditationSubPage({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          order: true,
          sessionType: true,
          subPageTitle: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
