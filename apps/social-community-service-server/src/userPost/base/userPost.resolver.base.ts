/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserPost } from "./UserPost";
import { UserPostCountArgs } from "./UserPostCountArgs";
import { UserPostFindManyArgs } from "./UserPostFindManyArgs";
import { UserPostFindUniqueArgs } from "./UserPostFindUniqueArgs";
import { CreateUserPostArgs } from "./CreateUserPostArgs";
import { UpdateUserPostArgs } from "./UpdateUserPostArgs";
import { DeleteUserPostArgs } from "./DeleteUserPostArgs";
import { UserPostService } from "../userPost.service";
@graphql.Resolver(() => UserPost)
export class UserPostResolverBase {
  constructor(protected readonly service: UserPostService) {}

  async _userPostsMeta(
    @graphql.Args() args: UserPostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserPost])
  async userPosts(
    @graphql.Args() args: UserPostFindManyArgs
  ): Promise<UserPost[]> {
    return this.service.userPosts(args);
  }

  @graphql.Query(() => UserPost, { nullable: true })
  async userPost(
    @graphql.Args() args: UserPostFindUniqueArgs
  ): Promise<UserPost | null> {
    const result = await this.service.userPost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserPost)
  async createUserPost(
    @graphql.Args() args: CreateUserPostArgs
  ): Promise<UserPost> {
    return await this.service.createUserPost({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserPost)
  async updateUserPost(
    @graphql.Args() args: UpdateUserPostArgs
  ): Promise<UserPost | null> {
    try {
      return await this.service.updateUserPost({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPost)
  async deleteUserPost(
    @graphql.Args() args: DeleteUserPostArgs
  ): Promise<UserPost | null> {
    try {
      return await this.service.deleteUserPost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
